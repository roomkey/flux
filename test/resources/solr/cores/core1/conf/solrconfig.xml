<?xml version="1.0" encoding="UTF-8" ?>
<config>
  <luceneMatchVersion>8.0.0</luceneMatchVersion>
  <dataDir>${solr.data.dir:}</dataDir>
	<directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}"/>
	<indexConfig>
          <lockType>single</lockType>
        </indexConfig>
	<!-- The default high-performance update handler -->
	<!-- <updateHandler class="solr.DirectUpdateHandler2"> -->
	<!-- 	<updateLog> -->
	<!-- 		<str name="dir">${solr.data.dir:}</str> -->
	<!-- 	</updateLog> -->
	<!-- </updateHandler> -->
	<query>
		<maxBooleanClauses>1024</maxBooleanClauses>
		<filterCache class="solr.FastLRUCache" size="512" initialSize="512" autowarmCount="0"/>
		<queryResultCache class="solr.LRUCache" size="512" initialSize="512" autowarmCount="0"/>
		<documentCache class="solr.LRUCache" size="512" initialSize="512" autowarmCount="0"/>
		<enableLazyFieldLoading>true</enableLazyFieldLoading>
		<queryResultWindowSize>20</queryResultWindowSize>
		<queryResultMaxDocsCached>200</queryResultMaxDocsCached>
		<listener event="newSearcher" class="solr.QuerySenderListener">
			<arr name="queries">
				<!--
           <lst><str name="q">solr</str><str name="sort">price asc</str></lst>
           <lst><str name="q">rocks</str><str name="sort">weight asc</str></lst>
          -->
			</arr>
		</listener>
		<listener event="firstSearcher" class="solr.QuerySenderListener">
			<arr name="queries">
				<lst>
					<str name="q">static firstSearcher warming in solrconfig.xml</str>
				</lst>
			</arr>
		</listener>
		<useColdSearcher>false</useColdSearcher>
		<maxWarmingSearchers>2</maxWarmingSearchers>
	</query>
	<requestDispatcher handleSelect="false">
		<requestParsers enableRemoteStreaming="true" multipartUploadLimitInKB="2048000"/>
		<httpCaching never304="true"/>
	</requestDispatcher>
	<requestHandler name="/select" class="solr.SearchHandler">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<int name="rows">10</int>
			<str name="df">text</str>
		</lst>
	</requestHandler>
	<!-- realtime get handler, guaranteed to return the latest stored fields of
       any document, without the need to commit or open a new searcher.  The
       current implementation relies on the updateLog feature being enabled. -->
	<requestHandler name="/get" class="solr.RealTimeGetHandler">
		<lst name="defaults">
			<str name="omitHeader">true</str>
			<str name="wt">json</str>
			<str name="indent">true</str>
		</lst>
	</requestHandler>
	<!-- A Robust Example

       This example SearchHandler declaration shows off usage of the
       SearchHandler with many defaults declared

       Note that multiple instances of the same Request Handler
       (SearchHandler) can be registered multiple times with different
       names (and different init parameters)
    -->
	<requestHandler name="/browse" class="solr.SearchHandler">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<!-- VelocityResponseWriter settings -->
			<str name="wt">velocity</str>
			<str name="v.template">browse</str>
			<str name="v.layout">layout</str>
			<str name="title">Solritas</str>
			<!-- Query settings -->
			<str name="defType">edismax</str>
			<str name="qf">id timestamp</str>
			<str name="df">id</str>
			<str name="mm">100%</str>
			<str name="q.alt">*:*</str>
			<str name="rows">10</str>
			<str name="fl">*,score</str>
			<str name="mlt.qf">id timestamp</str>
			<str name="mlt.fl">id,timestamp</str>
			<int name="mlt.count">3</int>
			<!-- Faceting defaults -->
			<str name="facet">on</str>
			<str name="facet.field">id</str>
			<str name="facet.field">timestamp</str>
			<!-- <str name="facet.query">ipod</str>
       <str name="facet.query">GB</str>
       <str name="facet.mincount">1</str>
       <str name="facet.pivot">cat,inStock</str>
       <str name="facet.range.other">after</str>
       <str name="facet.range">price</str>
       <int name="f.price.facet.range.start">0</int>
       <int name="f.price.facet.range.end">600</int>
       <int name="f.price.facet.range.gap">50</int>
       <str name="facet.range">popularity</str>
       <int name="f.popularity.facet.range.start">0</int>
       <int name="f.popularity.facet.range.end">10</int>
       <int name="f.popularity.facet.range.gap">3</int>
       <str name="facet.range">manufacturedate_dt</str>
       <str name="f.manufacturedate_dt.facet.range.start">NOW/YEAR-10YEARS</str>
       <str name="f.manufacturedate_dt.facet.range.end">NOW</str>
       <str name="f.manufacturedate_dt.facet.range.gap">+1YEAR</str>
       <str name="f.manufacturedate_dt.facet.range.other">before</str>
       <str name="f.manufacturedate_dt.facet.range.other">after</str> -->
			<!-- Highlighting defaults -->
			<!-- <str name="hl">on</str>
       <str name="hl.fl">content features title name</str>
       <str name="hl.encoder">html</str>
       <str name="hl.simple.pre">&lt;b&gt;</str>
       <str name="hl.simple.post">&lt;/b&gt;</str>
       <str name="f.title.hl.fragsize">0</str>
       <str name="f.title.hl.alternateField">title</str>
       <str name="f.name.hl.fragsize">0</str>
       <str name="f.name.hl.alternateField">name</str>
       <str name="f.content.hl.snippets">3</str>
       <str name="f.content.hl.fragsize">200</str>
       <str name="f.content.hl.alternateField">content</str>
       <str name="f.content.hl.maxAlternateFieldLength">750</str> -->
			<!-- Spell checking defaults -->
			<!-- <str name="spellcheck">on</str>
       <str name="spellcheck.extendedResults">false</str>
       <str name="spellcheck.count">5</str>
       <str name="spellcheck.alternativeTermCount">2</str>
       <str name="spellcheck.maxResultsForSuggest">5</str>
       <str name="spellcheck.collate">true</str>
       <str name="spellcheck.collateExtendedResults">true</str>
       <str name="spellcheck.maxCollationTries">5</str>
       <str name="spellcheck.maxCollations">3</str>            -->
		</lst>
		<!-- append spellchecking to our list of components -->
		<arr name="last-components">
			<str>spellcheck</str>
		</arr>
	</requestHandler>

	<requestHandler name="/analysis/field" startup="lazy" class="solr.FieldAnalysisRequestHandler"/>
	<requestHandler name="/analysis/document" class="solr.DocumentAnalysisRequestHandler" startup="lazy"/>
	<requestHandler name="/admin/ping" class="solr.PingRequestHandler">
		<lst name="invariants">
			<str name="q">solrpingquery</str>
		</lst>
		<lst name="defaults">
			<str name="echoParams">all</str>
		</lst>
		<str name="healthcheckFile">server-enabled.txt</str>
	</requestHandler>
	<requestHandler name="/debug/dump" class="solr.DumpRequestHandler">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<str name="echoHandler">true</str>
		</lst>
	</requestHandler>
	<queryResponseWriter name="json" class="solr.JSONResponseWriter">
		<!-- For the purposes of the tutorial, JSON responses are written as
      plain text so that they are easy to read in *any* browser.
      If you expect a MIME type of "application/json" just remove this override.
     -->
		<str name="content-type">text/plain; charset=UTF-8</str>
	</queryResponseWriter>
	<!--
     Custom response writers can be declared as needed...
    -->
	<queryResponseWriter name="velocity" class="solr.VelocityResponseWriter" startup="lazy"/>
	<!-- Legacy config for the admin interface -->
	<admin>
		<defaultQuery>*:*</defaultQuery>
	</admin>
	<!-- Spell Check

       The spell check component can return a list of alternative spelling
       suggestions.

       http://wiki.apache.org/solr/SpellCheckComponent
    -->
	<searchComponent name="spellcheck" class="solr.SpellCheckComponent">
		<str name="queryAnalyzerFieldType">textSpell</str>
		<!-- Multiple "Spell Checkers" can be declared and used by this
        component
     -->
		<!-- a spellchecker built from a field of the main index -->
		<lst name="spellchecker">
			<str name="name">default</str>
			<str name="field">name</str>
			<str name="classname">solr.DirectSolrSpellChecker</str>
			<!-- the spellcheck distance measure used, the default is the internal levenshtein -->
			<str name="distanceMeasure">internal</str>
			<!-- minimum accuracy needed to be considered a valid spellcheck suggestion -->
			<float name="accuracy">0.5</float>
			<!-- the maximum #edits we consider when enumerating terms: can be 1 or 2 -->
			<int name="maxEdits">2</int>
			<!-- the minimum shared prefix when enumerating terms -->
			<int name="minPrefix">1</int>
			<!-- maximum number of inspections per result. -->
			<int name="maxInspections">5</int>
			<!-- minimum length of a query term to be considered for correction -->
			<int name="minQueryLength">4</int>
			<!-- maximum threshold of documents a query term can appear to be considered for correction -->
			<float name="maxQueryFrequency">0.01</float>
			<!-- uncomment this to require suggestions to occur in 1% of the documents
     	<float name="thresholdTokenFrequency">.01</float>
     -->
		</lst>
		<!-- a spellchecker that can break or combine words.  See "/spell" handler below for usage -->
		<lst name="spellchecker">
			<str name="name">wordbreak</str>
			<str name="classname">solr.WordBreakSolrSpellChecker</str>
			<str name="field">name</str>
			<str name="combineWords">true</str>
			<str name="breakWords">true</str>
			<int name="maxChanges">10</int>
		</lst>
		<!-- a spellchecker that uses a different distance measure -->
		<!--
      <lst name="spellchecker">
        <str name="name">jarowinkler</str>
        <str name="field">spell</str>
        <str name="classname">solr.DirectSolrSpellChecker</str>
        <str name="distanceMeasure">
          org.apache.lucene.search.spell.JaroWinklerDistance
        </str>
      </lst>
    -->
		<!-- a spellchecker that use an alternate comparator

        comparatorClass be one of:
         1. score (default)
         2. freq (Frequency first, then score)
         3. A fully qualified class name
     -->
		<!--
      <lst name="spellchecker">
        <str name="name">freq</str>
        <str name="field">lowerfilt</str>
        <str name="classname">solr.DirectSolrSpellChecker</str>
        <str name="comparatorClass">freq</str>
     -->
		<!-- A spellchecker that reads the list of words from a file -->
		<!--
      <lst name="spellchecker">
        <str name="classname">solr.FileBasedSpellChecker</str>
        <str name="name">file</str>
        <str name="sourceLocation">spellings.txt</str>
        <str name="characterEncoding">UTF-8</str>
        <str name="spellcheckIndexDir">spellcheckerFile</str>
      </lst>
     -->
	</searchComponent>
</config>
